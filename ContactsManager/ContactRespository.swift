//
//  ContactRespository.swift
//  ContactsManager
//
//  Created by alex on 11/5/2024.
//

import Foundation
import FirebaseFirestore

class ContactRespository {
    var db = Firestore.firestore()
    
    
    
    //        whereField("country", in: ["USA", "Japan"])
    //        _ = db.collection(name).whereField("userId", isEqualTo: userId)
    
    //This is a trailing closure: A function whose last parameter is a closure
    //the closure receives an contact's array and returns nothing
    func findUserContacts( fromCollection name : String, completion : @escaping ([Contact]) -> ()){

        var contacts = [Contact]()
        _ = db.collection(name)
            .addSnapshotListener { snapshot, error in  //we add a listener, so we can listen for updates made to our db, it returns a current snapshot with the found data, and an error if there is any
                if let documents = snapshot?.documents { //we unwrap the documents inside of the snapshot
                    
                    contacts = documents.compactMap({ doc -> Contact? in    //we transform (by using compactMap) where we receive a document represented by the variable doc and return a Contact
                        let data = doc.data()
                        return Contact(id: doc.documentID, dictionary: data) // using the initializer that receives the docId and the data in a dictionary
                    })
                    
                    for contact in contacts {
                        print(contact.firstname)
                    }
                    completion(contacts) //we execute the completion which is a block of code received as parameter
                   // self.contactsTableView.reloadData()
                     
                }else{
                    print("Error fetching documents \(error!)")
                    return
                }
            }
    }
    
    func addUser(user: User ) -> Bool {
        var result = true
        let dictionary : [String: Any] = [
            "firstname": user.firstname,
            "lastname": user.lastname,
            "email": user.email,
            "phone": user.phone,
            "photo": user.photo,
            "registered": user.registered ?? FieldValue.serverTimestamp(), //if user.registered is nil then assignt the server timestamp
            "contacts": user.contacts
        ]
        /* The commented code works whenever we want to an autogeneratedID
        db.collection("users").addDocument(data: dictionary){ error in
            if let error = error {
                print("user could not be added \(user.email), error: \(error)")
                result = false
            }
        }*/
        //we set a particular Id so we use it
        db.collection("users").document(user.id).setData(dictionary){ error in
            if let error = error {
                print("user could not be added \(user.email), error: \(error)")
                result = false
            }
        }
        return result
    }
    
}
